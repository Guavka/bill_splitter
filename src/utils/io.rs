use std::io;
use std::process::Command;
use std::str::FromStr;


/// Функция для очистки консоли.
///
/// Эта функция очищает консольный экран в зависимости от операционной системы.
pub fn clear_console() {
    if cfg!(target_os = "windows") {
        // Для Windows
        Command::new("cmd")
            .args(&["/C", "cls"])
            .status()
            .expect("Не удалось очистить консоль");
    } else {
        // Для Unix-подобных систем (Linux, macOS)
        Command::new("clear")
            .status()
            .expect("Не удалось очистить консоль");
    }
}

fn get_console(msg: &str, error_msg: &str) -> String {
    loop {
        println!("{}", msg);
        let mut input = String::new();

        // Чтение строки из консоли
        if io::stdin().read_line(&mut input).is_err() {
            println!("{}", error_msg);
            continue;
        }

        return input.trim().to_string();
    }
}

/// Функция для получения значения из консоли.
///
/// Эта функция использует обобщенные типы, чтобы можно было получать разные типы данных,
/// такие как `u8` или `f64`, при условии, что тип реализует трейт `std::str::FromStr`.
///
/// # Аргументы
///
/// * `msg` - Сообщение, которое будет выведено пользователю перед вводом значения.
/// * `error_msg` - Сообщение, которое будет выведено в случае ошибки при вводе.
/// * `check_func` - Необязательная функция для дополнительной проверки введенного значения.
///
/// # Возвращаемое значение
///
/// Возвращает значение типа `T`, которое было введено пользователем и успешно обработано.
pub fn get_number_console<T>(
    msg: &str,
    error_msg: &str,
    check_func: Option<Box<dyn Fn(T) -> bool>>,
) -> T
where
    T: FromStr + Copy,
{
    loop {
        let input = get_console(msg, error_msg);

        // Попытка парсинга введенной строки в тип T
        match input.parse::<T>() {
            Ok(value) => {
                // Если предоставлена функция проверки, вызываем её
                if let Some(ref func) = check_func {
                    if !func(value) {
                        // Вызываем функцию
                        continue;
                    }
                }
                return value; // Возвращаем успешно полученное значение
            }
            Err(_) => println!("{}", error_msg), // Обработка ошибки парсинга
        }
    }
}

/// Запрашивает у пользователя ввод числа в заданном диапазоне.
///
/// Эта функция выводит сообщение `msg` и ожидает ввода от пользователя.
/// Если происходит ошибка при чтении, выводится сообщение `error_msg`.
/// Если введенное значение не может быть преобразовано в тип `T` или не попадает в заданный диапазон
/// от `min_value` до `max_value`, выводится сообщение `range_msg` с указанием допустимого диапазона.
///
/// # Параметры
///
/// - `msg`: Сообщение, которое будет выведено пользователю перед запросом ввода.
/// - `min_value`: Минимально допустимое значение для ввода.
/// - `max_value`: Максимально допустимое значение для ввода.
/// - `error_msg`: Сообщение, которое будет выведено в случае ошибки при чтении ввода или парсинга.
/// - `range_msg`: Сообщение, которое будет выведено, если введенное значение не попадает в диапазон.
///
/// # Возвращаемое значение
///
/// Возвращает значение типа `T`, введенное пользователем, которое находится в заданном диапазоне.
///
/// # Примечания
///
/// Функция будет продолжать запрашивать ввод до тех пор, пока не будет получено
/// корректное значение, которое находится в диапазоне от `min_value` до `max_value`.
pub fn get_number_range<T>(
    msg: &str,
    min_value: T,
    max_value: T,
    error_msg: &str,
    range_msg: &str,
) -> T
where
    T: FromStr + Copy + PartialOrd + std::fmt::Display,
{
    loop {
        let input = get_console(msg, error_msg);

        // Попытка парсинга введенной строки в тип T
        match input.parse::<T>() {
            Ok(value) => {
                if value < min_value || value > max_value {
                    println!("{} [{},{}]", range_msg, min_value, max_value);
                    continue;
                }
                return value; // Возвращаем успешно полученное значение
            }
            Err(_) => println!("{}", error_msg), // Обработка ошибки парсинга
        }
    }
}

/// Запрашивает у пользователя ввод строки и выполняет проверку на основе предоставленной функции.
///
/// Эта функция выводит сообщение `msg` и ожидает ввода от пользователя.
/// Если происходит ошибка при чтении, выводится сообщение `error_msg`.
/// Если предоставлена функция проверки `check_func`, она будет вызвана для проверки введенной строки.
/// Если проверка не проходит, функция запрашивает ввод повторно.
///
/// # Параметры
///
/// - `msg`: Сообщение, которое будет выведено пользователю перед запросом ввода.
/// - `error_msg`: Сообщение, которое будет выведено в случае ошибки при чтении ввода.
/// - `check_func`: Опциональная функция проверки, которая принимает ссылку на строку и возвращает `true`,
///   если строка проходит проверку, и `false` в противном случае.
///
/// # Возвращаемое значение
///
/// Возвращает строку, введенную пользователем, которая может быть проверена с помощью `check_func`.
///
/// # Примечания
///
/// Функция будет продолжать запрашивать ввод до тех пор, пока не будет получена
/// строка, которая проходит проверку (если такая функция предоставлена) или
/// пока не произойдет ошибка при чтении.
pub fn get_string_console(
    msg: &str,
    error_msg: &str,
    check_func: Option<Box<dyn Fn(&String) -> bool>>,
) -> String {
    loop {
        let input = get_console(msg, error_msg);

        // Если предоставлена функция проверки, вызываем её
        if let Some(ref func) = check_func {
            if !func(&input) {
                continue;
            }
        }
        return input; // Возвращаем успешно полученное значение
    }
}

/// Запрашивает у пользователя ввод строки и гарантирует, что она не пустая.
///
/// Эта функция выводит сообщение `msg` и ожидает ввода от пользователя.
/// Если пользователь вводит пустую строку, функция выводит сообщение `empty_msg`.
/// Если происходит ошибка при чтении, выводится сообщение `error_msg`.
/// В случае пустого ввода или ошибки функция продолжает запрашивать ввод.
///
/// # Параметры
///
/// - `msg`: Сообщение, которое будет выведено пользователю перед запросом ввода.
/// - `error_msg`: Сообщение, которое будет выведено в случае ошибки при чтении ввода.
/// - `empty_msg`: Сообщение, которое будет выведено, если пользователь ввел пустую строку.
///
/// # Возвращаемое значение
///
/// Возвращает строку, введенную пользователем, которая гарантированно не является пустой.
///
/// # Примечания
///
/// Функция будет продолжать запрашивать ввод до тех пор, пока не будет получена
/// непустая строка. Если ввод пустой, выводится сообщение, указанное в `empty_msg`.
///
pub fn get_string_not_empty(msg: &str, error_msg: &str, empty_msg: &str) -> String {
    loop {
        let input = get_console(msg, error_msg);

        if input.is_empty() {
            println!("{}", empty_msg);
            continue;
        }

        return input; // Возвращаем успешно полученное значение
    }
}
